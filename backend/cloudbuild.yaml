# Google Cloud Build configuration for Project Noah MVP Backend

# Required substitutions (pass these during Cloud Build trigger setup or `gcloud builds submit`)
# _GCP_PROJECT_ID: Your Google Cloud Project ID.
# _ARTIFACT_REGISTRY_REGION: Region for your Artifact Registry (e.g., us-central1).
# _ARTIFACT_REGISTRY_REPOSITORY: Name of your Artifact Registry repository (e.g., noah-mvp-backend-repo).
# _CLOUD_RUN_SERVICE_NAME: Name for your Cloud Run service (e.g., noah-mvp-agent-service).
# _CLOUD_RUN_REGION: Region for your Cloud Run service (e.g., us-central1).
# _SERVICE_ACCOUNT_EMAIL: Email of the SA for Cloud Run (e.g., sa-noah-cloudrun-agent@${_GCP_PROJECT_ID}.iam.gserviceaccount.com).
# Optional substitutions for VPC Connector if used:
# _VPC_CONNECTOR_NAME: Full name of VPC connector (projects/PROJECT_ID/locations/REGION/connectors/CONNECTOR_NAME)
# _VPC_EGRESS_SETTING: all-traffic or private-ranges-only

# Timeout for the build
timeout: '1200s' # 20 minutes

steps:
  # 1. Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: BuildImage
    args:
      - 'build'
      - '-t'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${_GCP_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPOSITORY}/${_CLOUD_RUN_SERVICE_NAME}:${COMMIT_SHA}'
      - '-f'
      - 'backend/Dockerfile' # Path to the Dockerfile within the build context
      - '.' # Build context is project root

  # 2. Push the Docker image to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: PushImage
    args:
      - 'push'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${_GCP_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPOSITORY}/${_CLOUD_RUN_SERVICE_NAME}:${COMMIT_SHA}'

  # 3. Deploy to Google Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: DeployToCloudRun
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_CLOUD_RUN_SERVICE_NAME}'
      - '--image=${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${_GCP_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPOSITORY}/${_CLOUD_RUN_SERVICE_NAME}:${COMMIT_SHA}'
      - '--region=${_CLOUD_RUN_REGION}'
      - '--platform=managed'
      - '--service-account=${_SERVICE_ACCOUNT_EMAIL}'
      - '--allow-unauthenticated' # For public API MVP, or use --no-allow-unauthenticated and configure IAM for invokers
      - '--port=8080' # Port your application listens on inside the container
      - '--timeout=300s' # Request timeout for the service
      - '--concurrency=80' # Max concurrent requests per container instance
      - '--min-instances=0' # For MVP, scale to zero to save costs
      - '--max-instances=2' # For MVP, limit max scale initially
      # Environment variables (fetch sensitive values from Secret Manager)
      # Format for secrets: NAME="projects/PROJECT_NUMBER/secrets/SECRET_ID/versions/VERSION"
      # Note: Use PROJECT_NUMBER (not project ID) when referencing secrets.
      # The Cloud Build service account needs roles/secretmanager.secretAccessor on these secrets.
      - '--set-env-vars=GCP_PROJECT_ID=${_GCP_PROJECT_ID}' # Pass project ID directly
      - '--set-env-vars=VERTEX_AI_REGION=${_CLOUD_RUN_REGION}' # Assuming Vertex AI in same region as Cloud Run
      - '--set-env-vars=DEFAULT_LLM_MODEL_NAME=gemini-1.0-pro-001' # Example, can be configured
      - '--set-env-vars=LOG_LEVEL=INFO'
      # RAG service env vars (replace SECRET_NAME placeholders with actual Secret Manager secret names from Terraform outputs)
      # These assume you have created secrets in Secret Manager with these names,
      # holding the output values from your Terraform apply (e.g., RAG bucket name, endpoint ID).
      - '--update-secrets=RAG_GCS_BUCKET_NAME=noah-rag-gcs-bucket-name:latest' # Example Secret Manager secret name
      - '--update-secrets=RAG_CHUNK_MAP_GCS_OBJECT_NAME=noah-rag-chunk-map-gcs-object-name:latest' # Example
      - '--update-secrets=VERTEX_AI_INDEX_ENDPOINT_ID=noah-vertex-ai-index-endpoint-id:latest' # Example
      - '--update-secrets=VERTEX_AI_DEPLOYED_INDEX_ID=noah-vertex-ai-deployed-index-id:latest' # Example
      # Firebase service account (if using JSON path from Secret Manager)
      # - '--update-secrets=FIREBASE_SERVICE_ACCOUNT_JSON_PATH=noah-firebase-sa-json:latest' # Secret containing the content of the JSON keyfile
      # VPC Connector settings (if needed, pass _VPC_CONNECTOR_NAME and _VPC_EGRESS_SETTING substitutions)
      # - '--vpc-connector=${_VPC_CONNECTOR_NAME}'
      # - '--vpc-egress=${_VPC_EGRESS_SETTING}' # e.g., 'all-traffic' or 'private-ranges-only'
      - '--labels=app=noah-mvp,service=backend,environment=mvp'

# Store images in Artifact Registry tagged with commit SHA
images:
  - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${_GCP_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPOSITORY}/${_CLOUD_RUN_SERVICE_NAME}:${COMMIT_SHA}'

# Define options for the build (e.g., machine type for builder VM)
# options:
#   machineType: 'N1_HIGHCPU_8' # Or E2_HIGHCPU_8
